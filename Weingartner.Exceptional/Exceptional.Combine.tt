<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>

using System;
using System.Collections.Generic;
using Weingartner.Exceptional;

namespace Weingartner.Exceptional {
    public  static partial class Exceptional {

    <#foreach(int i in Enumerable.Range(1,16))
    {
		string typeArgs = String.Join(", ", Enumerable.Range(1, i).Select( v => "T" + v.ToString() ));
        string args     = String.Join(", ", Enumerable.Range(1, i).Select( v => String.Format("IExceptional<T{0}> t{0}", v)));
		string fnArgs = String.Join(", ", Enumerable.Range(1, i).Select( v => String.Format("t{0}.Value", v )));
    #>

    /// <Summary>
    /// If any of the inputs are in error then the output will contain an aggregate
    /// exception of the inputs. If the selector function throws then the output will
    /// contain that exception.
    /// </Summary>
    public static IExceptional<TU> Combine<<#=typeArgs#>, TU>
        ( <#= args #>
        , Func<<#=typeArgs#>, TU> fn)
    {
        var errors = new List<Exception>();
        <# foreach(int j in Enumerable.Range(1,i)) { #>
        if(t<#=j#>.HasException)
            errors.Add(t<#=j#>.Exception);
        <#}#>

		if (errors.Count==1)
		{
			return  new Exceptional<TU>(errors[0]);
		}
        else if (errors.Count>1)
		{
			var ex = new AggregateException(errors);
			ex.Flatten();
			return  new Exceptional<TU>(ex);
		}

        try{
            return fn(<#=fnArgs#>).ToExceptional();
        }catch(Exception e){
            return new Exceptional<TU>(e);
        }
    }

    <#}#>


    }
}

